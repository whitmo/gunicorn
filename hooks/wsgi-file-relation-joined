#!/bin/bash
set -e

unit_name=${JUJU_REMOTE_UNIT//\//-}
working_dir=$(relation-get working_dir)

if [ -z "$working_dir" ] ; then
    juju-log "No working_dir yet: skipping."
    exit 0 # wait for future handshake
fi

variables="wsgi_wsgi_file wsgi_workers wsgi_worker_class wsgi_worker_connections wsgi_max_requests wsgi_timeout wsgi_backlog wsgi_keep_alive wsgi_extra wsgi_user wsgi_group wsgi_umask wsgi_log_file wsgi_log_level wsgi_access_logfile wsgi_access_logformat env_extra django_settings python_path port"

if [[ $JUJU_RELATION_ID =~ django.* ]]; then
    mode=django
elif [[ $JUJU_RELATION_ID =~ wsgi.* ]]; then
    mode=wsgi
else
    juju-log "Unknown mode ($JUJU_RELATION_ID)"
    exit 1
fi

juju-log "Running in ${mode} mode"


declare -A VAR
for v in $variables;do
  VAR[$v]=$(relation-get $v)
  if [ -z "${VAR[$v]}" ] ; then
    VAR[$v]=$(config-get $v)
  fi
done

juju-log "Got variables: ${VAR[@]}"


if [ -z "$wsgi_error_logfile" ] ; then
    error_logfile="${working_dir}/gunicorn.log"
fi

if [ -n "$VAR[django_settings]" ] ; then
    django_settings="'django_settings': '${VAR[django_settings]}',"
fi

# If running in wsgi mode then set a default wsgi file
if [[ $mode -eq "wsgi" ]] && [[ $(relation-get wsgi_wsgi_file) -eq "" ]] ; then
    VAR[wsgi_wsgi_file]="wsgi"
fi

if [[ -n ${VAR[wsgi_wsgi_file]} ]] ; then
    wsgi_wsgi_file="'${VAR[wsgi_wsgi_file]}',"
fi

if [[ -z ${VAR[python_path]} ]] ; then
    python_path=${working_dir}
else
    python_path="${VAR[python_path]}"
fi

juju-log "Writing config file: /etc/gunicorn.d/${unit_name}.conf"

cat > /etc/gunicorn.d/${unit_name}.conf <<EOF
CONFIG = {
    'mode': '${mode}',
    'environment': {
        'PYTHONPATH': '${python_path}',
        ${VAR[env_extra]}
    },
    ${django_settings}
    'working_dir': '${working_dir}',
    'user': '${VAR[wsgi_user]}',
    'group': '${VAR[wsgi_group]}',
    'args': (
        '--name=${unit_name}',
        '--workers=${VAR[wsgi_workers]}',
        '--worker-class=${VAR[wsgi_worker_class]}',
        '--worker-connections=${VAR[wsgi_worker_connections]}',
        '--max-requests=${VAR[wsgi_max_requests]}',
        '--backlog=${VAR[wsgi_backlog]}',
        '--timeout=${VAR[wsgi_timeout]}',
        '--keep-alive=${VAR[wsgi_keep_alive]}',
        '--umask=${VAR[wsgi_umask]}',
        '--bind=0.0.0.0:${VAR[port]}',
        '--log-file=${VAR[wsgi_log_file]}',
        '--log-level=${VAR[wsgi_log_level]}',
        '--access-logfile=${VAR[wsgi_access_logfile]}',
        '--access-logformat=${VAR[wsgi_access_logformat]}',
        ${VAR[wsgi_extra]}
        ${wsgi_wsgi_file}
    ),
}
EOF


juju-log "start/restart gunicorn"

# We need this because when the contained charm configuration or code changed
# Gunicorn needs to restart to run the new code.
service gunicorn restart

juju-log "Opening port: ${VAR[port]}"
open-port "${VAR[port]}/tcp"
